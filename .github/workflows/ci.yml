name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  audit:
    name: Audit
    runs-on: windows-2022
    timeout-minutes: 60
    env:
      sonar_available: ${{ secrets.SONAR_TOKEN  != '' && 'true' || 'false' }}
      snyk_available: ${{ secrets.SNYK_TOKEN  != '' && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Set dependency versions
        id: versions
        run: echo "STEADYBIT_WINDIVERT_VERSION=$(grep STEADYBIT_WINDIVERT_VERSION versions.txt | cut -d= -f2)" >> GITHUB_ENV

      - name: Audit
        run: |
          go mod download
          make audit
        shell: powershell

      - name: "[release] Snyk test"
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.snyk_available == 'true' }}
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --org=${{ vars.SNYK_ORG_ID }} --severity-threshold=high --project-name=${{ github.repository }} --target-reference=${{ github.ref_name }}
          command: test

      - name: SonarCloud Scan
        if: ${{ env.sonar_available == 'true' }}
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: "[release] SonarCloud Quality Gate check"
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.sonar_available == 'true' }}
        uses: sonarsource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build & Release
    needs: audit
    runs-on: windows-2022
    outputs:
      artifact-id: ${{ steps.artifact-upload.outputs.artifact-id }}
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Set dependency versions
        id: versions
        run: echo "STEADYBIT_WINDIVERT_VERSION=$(grep STEADYBIT_WINDIVERT_VERSION versions.txt | cut -d= -f2)" >> GITHUB_ENV

      - name: Build extension installer
        run: |
          make installer
        shell: powershell

      - name: Installing the extension 
        run: |
            $ErrorActionPreference = "Stop"
            Start-Process "msiexec.exe" -ArgumentList "/a SteadybitWindowsHostExtension.msi /quiet /qn /log install.log" -Wait -NoNewWindow
            if ($LastExitCode -ne 0) {
              throw "MSI installation failed with exit code $LastExitCode"
            }
        working-directory: ./dist
        shell: powershell

      - name: Upload Artifacts
        id: artifact-upload
        uses: actions/upload-artifact@v4
        with:
          path: |
            dist/*.zip
            dist/*.msi
          retention-days: 7

      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: true
          prerelease: ${{ !contains(github.ref, '-') }}
          fail_on_unmatched_files: true
          files: "dist/*.zip"

  refresh-demo:
    name: Refresh Dev Demo
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Trigger Update EC2 Windows Demo
        env:
          ARTIFACT_ID: ${{needs.build.outputs.artifact-id}}
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: Windows-demo-deploy
          ref: main
          repo: steadybit/infrastructure-live
          inputs: >-
            {
              "artifact_id": "${{ env.ARTIFACT_ID }}"
            }
          token: ${{ secrets.PAT_TOKEN }}
