name: ci

on:
  push:
    branches:
      - 'windows-e2e'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  windows-e2e:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: eu-central-1
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Trigger Deploy Windows EC2
        id: deploy-windows-ec2
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: Windows-e2e-deploy
          ref: main
          repo: steadybit/infrastructure-live
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::244471902119:role/allow-auto-deploy-from-other-accounts"
          role-duration-seconds: 1000
          aws-region: eu-central-1

      - name: Retrieve instance ID for windows-e2e
        if: steps.deploy-windows-ec2.outcome == 'success'
        id: get-instance-id
        run: |
          sleep 15
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=windows-e2e" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text --region eu-central-1)
          if [ -z "$INSTANCE_ID" ]; then
            echo "No running instance with tag Name=windows-e2e was found."
            exit 1
          fi
          echo "Found instance ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for EC2 instance to be available in Fleet Manager
        id: instance-ready
        if: steps.get-instance-id.outcome == 'success'
        env:
          AWS_DEFAULT_REGION: eu-central-1
          INSTANCE_ID: ${{ steps.get-instance-id.outputs.instance_id }}
        run: |
          MAX_ATTEMPTS=30
          COUNT=0
          echo "Waiting for instance $INSTANCE_ID to appear in Fleet Manager (SSM)..."
          while [ $COUNT -lt $MAX_ATTEMPTS ]; do
            RESULT=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query "InstanceInformationList[*].InstanceId" --output text)
            if [ "$RESULT" = "$INSTANCE_ID" ]; then
              echo "Instance $INSTANCE_ID is available in Fleet Manager."
              exit 0
            fi
            echo "Instance not available yet. Sleeping 10 seconds..."
            sleep 10
            COUNT=$((COUNT + 1))
          done
          echo "ERROR: Instance $INSTANCE_ID did not become available within the expected time."
          exit 1

      - name: SSM Port Forward
        uses: skroutz-internal/aws-ssm-port-forwarding-session-action@v1.0.0
        with:
          target-id: ${{ steps.get-instance-id.outputs.instance_id }}
          portNumber: 8080
          localPortNumber: 8080

      - name: SSM Port-forward and test
        if: steps.instance-ready.outcome == 'success'
        env:
          INSTANCE_ID: ${{ steps.get-instance-id.outputs.instance_id }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          # Install the Session Manager Plugin if not already installed
          if ! command -v session-manager-plugin > /dev/null; then
            echo "Installing Session Manager Plugin..."
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o session-manager-plugin.deb
            sudo dpkg -i session-manager-plugin.deb
            rm session-manager-plugin.deb
          else
            echo "Session Manager Plugin is already installed."
          fi

          # Start SSM port forwarding in the background.
          # This will forward port 8080 on the instance to local port 8080.
          echo "Starting SSM port forwarding..."
          nohup aws ssm start-session \
            --target "$INSTANCE_ID" \
            --document-name "AWS-StartPortForwardingSession" \
            --parameters '{"portNumber":["8080"],"localPortNumber":["8080"]}' > port-forward.log 2>&1 &
          PORTFORWARD_PID=$!
          echo "SSM port forwarding started with PID $PORTFORWARD_PID"

          # Wait a few seconds to allow the port forwarding to establish
          sleep 10

          # Test the port forwarding by curling localhost:8080
          echo "Testing port forwarding..."
          curl_output=$(curl http://127.0.0.1:8080/)
          echo "Curl output: $curl_output"

          # Optionally, kill the port forwarding process after testing
          echo "Stopping port forwarding..."
          kill $PORTFORWARD_PID || echo "Failed to kill process with PID $PORTFORWARD_PID"

      - name: Trigger Delete Windows EC2
        uses: the-actions-org/workflow-dispatch@v4
        with:
          workflow: Windows-e2e-delete
          ref: main
          repo: steadybit/infrastructure-live
          token: ${{ secrets.PAT_TOKEN }}
